{"version":3,"sources":["assets/LandingPage.module.scss","pages/LandingPage.tsx","pages/WorkPage.tsx","pages/ProjectsPages.tsx","pages/ArtPage.tsx","components/Card.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LandingPage","title","history","useHistory","handleClick","event","n","target","push","innerHTML","className","styles","container","onClick","navRows","Button","classes","workButton","workLabel","WorkPage","ProjectsPage","ArtPage","useStyles","makeStyles","root","minWidth","maxWidth","bullet","display","margin","transform","fontSize","pos","marginBottom","SimpleCard","bull","Card","CardContent","Typography","color","gutterBottom","variant","component","CardActions","size","AboutPage","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90fcf9ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"LandingPage_title__yyv34\",\"workButton\":\"LandingPage_workButton__1TMhj\",\"workLabel\":\"LandingPage_workLabel__PsX2E\",\"navRows\":\"LandingPage_navRows__yclJm\",\"container\":\"LandingPage_container__28WUm\"};","import React, {MouseEvent} from 'react';\nimport { Button } from '@material-ui/core';\nimport styles from '../assets/LandingPage.module.scss';\nimport { Link, useHistory } from 'react-router-dom';\nimport { EventEmitter } from 'events';\n// import Hello from '../assets/money.png';\n\n\n// yarn tsm src (the folder that holds the stuff you want definitions of )\n\nconst LandingPage: React.FC<{title: string}> = ({title}) => {\n\n    const history = useHistory();\n\n    const handleClick = (event: MouseEvent) => {\n\n        const n = event.target as HTMLInputElement;\n        \n        history.push(`/${n.innerHTML}`);\n\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title} onClick= {()=>history.push('/about')}>Grant Brewster</h1>\n            <div className={styles.navRows}>\n                <Button classes={{ 'root': styles.workButton, 'label': styles.workLabel }} onClick={handleClick}>work</Button>\n                <Button classes={{ 'root': styles.workButton, 'label': styles.workLabel }} onClick={handleClick}>projects</Button>\n                <Button classes={{ 'root': styles.workButton, 'label': styles.workLabel }} onClick={handleClick}>art</Button>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default LandingPage;","import React from 'react';\n\n\n// yarn tsm src (the folder that holds the stuff you want definitions of )\n\nconst WorkPage: React.FC = () => {\n\n    return (\n        <div >\n            <h1>WFH</h1>\n        </div>\n    );\n}\n\nexport default WorkPage;","import React from 'react';\n\n\n// yarn tsm src (the folder that holds the stuff you want definitions of )\n\nconst ProjectsPage: React.FC = () => {\n\n    return (\n        <div >\n            <h1>Projects</h1>\n        </div>\n    );\n}\n\nexport default ProjectsPage;","import React from 'react';\n\n\n// yarn tsm src (the folder that holds the stuff you want definitions of )\n\nconst ArtPage: React.FC = () => {\n    return (\n        <div >\n            <h1>Art</h1>\n        </div>\n    );\n}\n\nexport default ArtPage;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    maxWidth: 343,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst SimpleCard: React.FC<{title: string}> = ({title}) => {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>â€¢</span>;\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          be{bull}nev{bull}o{bull}lent\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          adjective\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          well meaning and kindly.\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default SimpleCard;","import React from 'react';\nimport Card from '../components/Card'\n\n// yarn tsm src (the folder that holds the stuff you want definitions of )\n\nconst AboutPage: React.FC = () => {\n\n    return (\n        <div >\n            \n            <h1>About Page</h1>\n            <Card title={'Songs'} />\n            <Card title={'Quotes'} />\n            <Card title={'Problems Worth Solving'} />\n            <Card title={'Books'} />\n            <Card title={'Social'} />\n        </div>\n    );\n}\n\nexport default AboutPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom'\n\nimport LandingPage from './pages/LandingPage'\nimport WorkPage from './pages/WorkPage'\nimport ProjectsPage from './pages/ProjectsPages'\nimport ArtPage from './pages/ArtPage'\nimport AboutPage from './pages/AboutPage'\n\n//  Router basename={process.env.PUBLIC_URL}\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Switch>\n        <Route path='/' component={LandingPage} exact/>\n        <Route path='/work' component={WorkPage} exact/>\n        <Route path='/projects' component={ProjectsPage} exact/>\n        <Route path='/art' component={ArtPage} exact/>\n        <Route path='/about' component={AboutPage} exact/>\n      </Switch>\n      {/* <LandingPage title={'Grant Brewster'}/> */}\n    </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}